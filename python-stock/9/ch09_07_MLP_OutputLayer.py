# ch09_07_MLP_OutputLayer.py
import numpy as np
X = np.array([10, 20]) # 1. (x1, x2)값을 임의의 값인 10, 20으로 준비한다.
# 2. 입력층(x1, x2)에서 1층 입력 신호(a1(1), a2(1), a3(1))로 향하는 가중치는 모두 6개이며,
# 2행 3열의 임의의 가중치를 갖는 배열로 존재한다.
W1 = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
# 3. 입력층에서 1층으로 향하는 편향은 (b1(1), b2(1), b3(1))이므로 모두 3개이며, 임의의 값으로 준비한다.
B1 = np.array([1, 2, 3])

def sigmoid(x):
    return 1 / (1 + np.exp(-x)) # 4. h() 활성화 함수로 시그모이드 함수를 사용했으므로 0에서 1 사잇값을 반환한다.

A1 = np.dot(X, W1) + B1 # 5. 1층의 입력 신호를 계산한다.
Z1 = sigmoid(A1) # 6. 1층의 입력 신호를 시그모이드 함수로 활성화하여 출력을 구한다.

# 7. 은닉층에서 출력층 입력 신호(a1(2), a2(2))로 향하는 가중치는 모두 6개이며,
# 3행 2열의 임의의 가중치를 갖는 배열로 준비한다.
W2 = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
B2 = np.array([0.1, 0.2]) # 8. 은닉층에서 출력층으로 향하는 편향은 (b1(2), b2(2))이므로 모두 2개이며, 임의의 값으로 준비한다.

A2 = np.dot(Z1, W2) + B2 # 9. 은닉층의 출력값 Z1에 가중치 W2를 곱하고 편향 B2를 더해서 출력층의 입력값 A2를 구한다.
Y = sigmoid(A2) # 10. 출력층의 활성화 함수로 시그모이드 함수를 사용해서 최종적으로 Y값을 구한다.